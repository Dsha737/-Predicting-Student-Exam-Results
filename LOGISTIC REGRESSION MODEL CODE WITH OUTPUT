#  Import libraries
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
===================================================================================================================
# Load dataset
df = pd.read_csv("student_data.csv")
=====================================================================================================
# Check column names
print("Available columns:", df.columns)

CODE OUTPUT:Available columns: Index(['StudentID', 'AttendanceRate', 'StudyTime', 'FinalExamScore',
       'PassFail'],
      dtype='object')

=====================================================================================================
# Define features and target
X = df[["AttendanceRate", "StudyTime"]]  # Adjust if column names differ
y = df["Pass/Fail"]
=================================================================================
# Split into train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
===========================================================================================
# Train Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)
======================================================================================================================
# Evaluate the model
y_pred = model.predict(X_test)
print("\nModel Evaluation:")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred, zero_division=0))

CODE OUTPUT: Model Evaluation:
Accuracy: 0.5
Confusion Matrix:
 [[1 1]
 [0 0]]
Classification Report:
               precision    recall  f1-score   support

           0       1.00      0.50      0.67         2
           1       0.00      0.00      0.00         0

    accuracy                           0.50         2
   macro avg       0.50      0.25      0.33         2
weighted avg       1.00      0.50      0.67     

===================================================================================================================
# Predict for new students
new_data = pd.DataFrame({
    "AttendanceRate": [60, 80, 90],
    "StudyTime": [2, 5, 8]
})
predictions = model.predict(new_data)
 CODE OUTPUT : 
 Predictions for new students:
Student 1 → Pass
Student 2 → Pass
Student 3 → Pass
print("\n Predictions for new students:")
for i, pred in enumerate(predictions):
    print(f"Student {i+1} → {'Pass' if pred == 1 else 'Fail'}")
